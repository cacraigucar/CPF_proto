# User's Guide

The cam_kessler code calls CCPP-compliant
physics schemes through the CCPP infrastructure code. As such, it requires the
CCPP infrastructure and physics code, both of which are included as externals
via the manage_externals tool

## Obtaining Code

  git clone -b cac_kessler https://github.com/cacraigucar/CPF_proto.git
     -- or --
  git clone -b cac_kessler_nottested https://github.com/cacraigucar/CPF_proto.git

# Below, the clone directory is referred to as <CPF_proto>

  cd CPF_proto
  ./manage_externals/checkout_externals

  # Create (or clean) and enter a build directory <build>
  mkdir -p <build>
    -- or --
  rm -rf <build>/*

  cd <build>

  cd cam_driver
  source etc/hobart_setup.sh  (for sh, see etc for other setup scripts)
  cmake <CPF_proto>/cam_driver/src

# There are some options to cmake to control the build:

  -DOUTPUT_ROOT=../scratch/kessler ../src
                         (without threading/OpenMP)
                         (may add -DCMAKE_BUILD_TYPE=Debug for debugging)
  # To switch between CAM6 data structures and CAM7 data structures:
  -DCAM_VERSION=CAM7 or -DCAM_VERSION=CAM6
  # Increase output from ccpp_capgen command (numbers higher than zero
  #   increase output with numbers two or greater enabling backtrace)
  -DVERBOSITY=<#>
  # To change the directory where the CCPP caps are generated (default is
  #    <build>/ccpp):
  -DCCPP_CAPS=<cap_gen_dir>

## Build the code
  make

1. Run the job
  * `./cam_kessler`
